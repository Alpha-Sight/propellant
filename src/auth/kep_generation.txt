import { AES, enc } from 'crypto-js';
import { getItem, setItem } from 'localforage'; // IndexedDB wrapper

// Encrypt private key with user's password
export async function storePrivateKey(privateKeyHex, userPassword) {
  try {
    // Salt the password with user ID or other identifier
    const userId = await getUserId();
    const saltedPassword = `${userPassword}:${userId}`;
    
    // Encrypt the private key
    const encryptedKey = AES.encrypt(privateKeyHex, saltedPassword).toString();
    
    // Store in IndexedDB (more secure than localStorage)
    await setItem('encryptedPrivateKey', encryptedKey);
    
    return true;
  } catch (error) {
    console.error('Failed to store private key:', error);
    return false;
  }
}

// Retrieve and decrypt private key
export async function retrievePrivateKey(userPassword) {
  try {
    // Get the encrypted key
    const encryptedKey = await getItem('encryptedPrivateKey');
    if (!encryptedKey) {
      throw new Error('No private key found');
    }
    
    // Salt the password same way as during encryption
    const userId = await getUserId();
    const saltedPassword = `${userPassword}:${userId}`;
    
    // Decrypt the key
    const decryptedBytes = AES.decrypt(encryptedKey, saltedPassword);
    const privateKey = decryptedBytes.toString(enc.Utf8);
    
    if (!privateKey) {
      throw new Error('Incorrect password');
    }
    
    return privateKey;
  } catch (error) {
    console.error('Failed to retrieve private key:', error);
    throw error;
  }
}

// Clear private key from memory when not in use
export function clearPrivateKeyFromMemory(privateKeyVar) {
  if (typeof privateKeyVar === 'string') {
    // Overwrite the string (not perfect but better than nothing)
    for (let i = 0; i < privateKeyVar.length; i++) {
      privateKeyVar = privateKeyVar.substring(0, i) + '0' + privateKeyVar.substring(i + 1);
    }
  } else if (privateKeyVar instanceof Uint8Array) {
    // Fill array with zeros
    privateKeyVar.fill(0);
  }
  
  // Set to null to allow garbage collection
  privateKeyVar = null;
}

// Optional: Use WebAuthn for securing key access
export async function secureWithBiometrics() {
  // This is a simplified example - implementation details vary by platform
  
  // Check if WebAuthn is available
  if (!window.PublicKeyCredential) {
    throw new Error('WebAuthn not supported in this browser');
  }
  
  // Create a credential - this would trigger fingerprint/face authentication
  const credential = await navigator.credentials.create({
    publicKey: {
      challenge: new Uint8Array(32), // Random challenge
      rp: { name: 'Your App Name', id: window.location.hostname },
      user: {
        id: new Uint8Array([0, 1, 2, 3]), // User ID in bytes
        name: 'user@example.com',
        displayName: 'Current User'
      },
      pubKeyCredParams: [
        { type: 'public-key', alg: -7 } // ES256 algorithm
      ],
      timeout: 60000,
      attestation: 'direct'
    }
  });
  
  // Store credential ID to use for future authentications
  if (credential) {
    await setItem('webAuthnCredentialId', credential.id);
    return true;
  }
  
  return false;
}


This implementation ensures that:

Private keys are encrypted before being stored
Keys are stored in IndexedDB (more secure than localStorage)
Keys are cleared from memory when not in use
Optional biometric protection for accessing keys


The JavaScript code I provided earlier is for the frontend part of your application, which handles:

Key Generation: Creating key pairs during registration
Secure Storage: Encrypting private keys before storing them
Key Management: Retrieving and using keys securely
Enhanced Security: Optional biometric protection with WebAuthn
These two components work together to create a complete, secure authentication system:

The frontend generates key pairs, stores private keys securely, and signs messages
The contract verifies signatures, manages tokens, and enforces access control
The backend communicates with both to process requests and generate CVs
Would you like me to provide the updated contract implementation that uses this crypto module for the key verification functions?










This crypto.rs file provides all the necessary functions for your Xion blockchain contract to handle secure authentication. It includes:

Signature Verification: Validating signatures from frontend requests
Token Generation: Creating secure tokens for the backend to verify
Timestamp Validation: Preventing replay attacks
Challenge-Response: Functions for authentication challenges
Data Validation: Functions to validate inputs and formats
Testing: Unit tests to verify functionality